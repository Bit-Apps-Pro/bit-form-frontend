!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).bit_country_field = e() }(this, (function () { "use strict"; return class { #t; #e; #s; #i; #n; #l; #o = "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg'/>"; #r; #a; #h; #d; #c = ""; #p = []; #u = !0; #m = !0; #y = !0; #C = !0; #b = !1; #g = !1; #E = ""; #f = "Select a Country"; #I = "Search Country"; #w = "No Currency Found"; #v = 370; #O; #x = {}; #L = []; #S = {}; #A = {}; #W = ""; #T = ""; #F = null; #k = ""; #N = []; #$; constructor(t, e) { this.#B(e), this.#t = "string" == typeof t ? this.#O.querySelector(t) : t, this.#p = [...this.#L], this.fieldKey = this.#T, this.init() } #B(t) { this.#E = t.defaultValue || "", this.#f = t.placeholder || "Select a Country", this.#I = t.searchPlaceholder || "Search Country", this.#w = t.noCountryFoundText || "No Country Found", this.#v = t.maxHeight || 370, this.#u = t.selectedFlagImage || !0, this.#m = t.selectedCountryClearable || !0, this.#y = t.searchClearable || !0, this.#C = t.optionFlagImage || !0, this.#b = t.detectCountryByIp || !1, this.#g = t.detectCountryByGeo || !1, this.#W = t.assetsURL || "", this.#$ = t.onChange || null, this.#L = t.initialOptions || [], t.document ? this.#O = t.document : this.#O = document, t.window ? this.#x = t.window : this.#x = window } init() { this.#e = this.#K(`.${this.fieldKey}-country-hidden-input`), this.#s = this.#K(`.${this.fieldKey}-dpd-wrp`), this.#i = this.#K(`.${this.fieldKey}-selected-country-img`), this.#r = this.#K(`.${this.fieldKey}-opt-search-input`), this.#a = this.#K(`.${this.fieldKey}-search-clear-btn`), this.#h = this.#K(`.${this.fieldKey}-option-wrp`), this.#d = this.#K(`.${this.fieldKey}-option-list`), this.#b && this.#H(), this.#g && this.#R(), this.#E && this.setSelectedCountryItem(this.#E), this.#D(), this.#M(), this.#V(), this.#u || this.#i?.remove(), this.#y && (this.#r.style.paddingRight = "25px", this.#a.style.display = "none") } #M() { this.#P(this.#s, "click", (t => { this.#U(t) })), this.#P(this.#s, "keyup", (t => { this.#U(t) })), this.#P(this.#t, "keydown", (t => { this.#j(t) })), this.#y && this.#P(this.#a, "click", (() => { this.searchOptions("") })), this.#P(this.#r, "keyup", (t => { this.#G(t) })), function (t, e, s) { let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0; const n = Object.getPrototypeOf(t); if (Object.prototype.hasOwnProperty.call(n, e)) { const l = Object.getOwnPropertyDescriptor(n, e); Object.defineProperty(t, e, { configurable: !0, get() { for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++)e[s] = arguments[s]; return l.get.apply(this, e) }, set() { const t = this[e]; for (var n = arguments.length, o = new Array(n), r = 0; r < n; r++)o[r] = arguments[r]; l.set.apply(this, o); const a = this[e]; return "function" == typeof s && setTimeout(s.bind(this, t, a), i), a } }) } }(this.#e, "value", ((t, e) => { this.#z(t, e) })) } #D() { const t = this.#e.name, e = decodeURIComponent(`${document.URL}`.replace(/\+/g, "%20")).replace(new RegExp(`.*${t}=([^&]*).*|(.*)`), "$1"); e && this.#z("", e) } #K(t) { return this.#t.querySelector(t) || void 0 } #P(t, e, s) { t.addEventListener(e, s), this.#N.push({ selector: t, eventType: e, cb: s }) } #H() { fetch("https://www.cloudflare.com/cdn-cgi/trace").then((t => t.text())).then((t => { const e = t.trim().split("\n").reduce(((t, e) => { const [s, i] = e.split("="); return t[s] = i, t }), {}); this.setSelectedCountryItem(e?.loc) })) } #R() { navigator.geolocation.getCurrentPosition((t => { const { latitude: e, longitude: s } = t.coords; fetch(`http://api.geonames.org/countryCodeJSON?username=bitcodezoho1&lat=${e}&lng=${s}`).then((t => t.json())).then((t => { this.setSelectedCountryItem(t.countryCode) })) })) } #j(t) { const e = this.#O.activeElement; let s = null; if (this.#_()) { const i = Number(e.dataset.index || -1); if ("ArrowDown" === t.key || !t.shiftKey && "Tab" === t.key) { if (t.preventDefault(), e === this.#r) s = this.#K(`.${this.fieldKey}-option:not(.disabled-opt)`); else if (e.classList.contains("option")) { const t = this.#q(i, "next"), e = this.#J(t); e ? s = e : t + 1 < this.#p.length && (this.virtualOptionList?.scrollToIndex(t, "center"), setTimeout((() => { const e = this.#J(t); e && e.focus() }), 0)) } } else if ("ArrowUp" === t.key || t.shiftKey && "Tab" === t.key) { if (t.preventDefault(), e === this.#r) s = this.#s, this.#_() && this.setMenu({ open: !1 }); else if (e.classList.contains("option")) { const t = this.#q(i, "previous"), e = this.#J(t); e ? s = e : t > 0 ? (this.virtualOptionList?.scrollToIndex(t, "center"), setTimeout((() => { const e = this.#J(t); e && e.focus() }), 0)) : e || (s = this.#r) } } else "Escape" === t.key && this.setMenu({ open: !1 }) } else if (t.key >= "a" && t.key <= "z") { clearTimeout(this.#F), this.#k += t.key, this.#F = setTimeout((() => { this.#k = "" }), 300); const e = this.#L.find((t => !t.disabled && t.lbl.toLowerCase().startsWith(this.#k))); e && this.setSelectedCountryItem(e.i) } else if ("ArrowDown" === t.key || "ArrowUp" === t.key) { const e = this.#Q(), s = "ArrowDown" === t.key ? "next" : "previous", i = this.#q(e, s); i > -1 && i < this.#L.length && (this.value = this.#L[i].val) } s && s.focus() } #J(t) { return this.#K(`.${this.fieldKey}-option-list .${this.fieldKey}-option[data-index="${t}"]`) } #q() { let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -1, e = arguments.length > 1 ? arguments[1] : void 0; if ("next" === e) { const e = this.#L.length; for (let s = t + 1; s < e; s += 1)if (!this.#L[s].disabled) return s } else if ("previous" === e) for (let e = t - 1; e >= 0; e -= 1)if (!this.#L[e].disabled) return e } #z(t, e) { const s = this.#L.find((t => t.val === e)); s && t !== e && this.setSelectedCountryItem(s.i) } #X(t) { t.stopPropagation(), this.#c = "", this.#u && (this.#i.src = this.#o), this.#Y(this.#n, this.#f), this.#m && (this.#l.style.display = "none"), this.#Z(this.#s, "aria-label", "Selected country cleared"), this.#s.focus(), this.value = "", setTimeout((() => { this.#Z(this.#s, "aria-label", this.#f) }), 100), this.#tt() } setSelectedCountryItem(t) { if (this.#c = t, !this.#c) return; const e = this.#et(); e && (this.#n = this.#K(`.${this.fieldKey}-selected-country-lbl`), this.#m && (this.#l = this.#m ? this.#K(`.${this.fieldKey}-inp-clr-btn`) : {}), this.#u && this.#i && (this.#i.src = `${this.#W}${e.img}`), this.#Y(this.#n, e.lbl), this.setMenu({ open: !1 }), this.value = e.val, this.#m && (this.#l.style.display = "grid", this.#P(this.#l, "click", (t => { this.#X(t) }))), this.#$ && this.#$(e.val), this.#Z(this.#s, "aria-label", `${e.lbl} selected`), setTimeout((() => { this.#Z(this.#s, "aria-label", e.lbl) }), 100)) } #Q() { return this.#p.findIndex((t => t.i === this.#c)) } #et() { return this.#L.find((t => t.i === this.#c)) } #st(t) { return this.#O.createElement(t) } #it(t, e) { t.classList.add(e) } #Y(t, e) { t.textContent = e } #Z(t, e, s) { t?.setAttribute?.(e, s) } #tt() { this.virtualOptionList?.setRowCount(this.#p.length); const t = this.#Q(); this.virtualOptionList?.scrollToIndex(-1 === t ? 0 : t) } #nt(t, e) { const s = Object.keys(e), i = s.length; if (i) for (let n = 0; n < i; n += 1)this.#Z(t, s[n], e[s[n]]) } #V() { const t = this.#Q(); this.virtualOptionList = new bit_virtualized_list(this.#d, { height: this.#v, rowCount: this.#p.length, rowHeight: 31, initialIndex: -1 === t ? 0 : t, renderRow: t => { const e = this.#p[t], s = this.#st("li"); if (this.#Z(s, "data-key", e.i), this.#Z(s, "data-index", t), "option" in this.#S) { const t = this.#S.option; this.#nt(s, t) } if (!e.i) return this.#Y(s, e.lbl), this.#it(s, "opt-not-found"), s; if (this.#it(s, `${this.fieldKey}-option`), "option" in this.#A) { const t = this.#A.option; t && this.#it(s, t) } const i = this.#st("span"); if (this.#it(i, `${this.fieldKey}-opt-lbl-wrp`), "opt-lbl-wrp" in this.#A) { const t = this.#A["opt-lbl-wrp"]; t && this.#it(i, t) } if ("opt-lbl-wrp" in this.#S) { const t = this.#S["opt-lbl-wrp"]; this.#nt(i, t) } if (this.#C) { const t = this.#st("img"); if ("opt-icn" in this.#S) { const t = this.#S["opt-icn"]; t && this.#nt(i, t) } if (this.#it(t, `${this.fieldKey}-opt-icn`), "opt-icn" in this.#A) { const e = this.#A["opt-icn"]; e && this.#it(t, e) } t.src = `${this.#W}${e.img}`, t.alt = `${e.lbl} flag image`, t.loading = "lazy", this.#Z(t, "aria-hidden", !0), i.append(t) } const n = this.#st("span"); if ("opt-lbl" in this.#S) { const t = this.#S["opt-lbl"]; this.#nt(i, t) } if (this.#it(n, `${this.fieldKey}-opt-lbl`), "opt-lbl" in this.#A) { const t = this.#A["opt-lbl"]; t && this.#it(n, t) } this.#Y(n, e.lbl), i.append(n); const l = this.#st("span"); return this.#it(l, "opt-prefix"), this.#Y(l, e.code), s.tabIndex = this.#_() ? "0" : "-1", this.#Z(s, "role", "option"), this.#Z(s, "aria-posinset", t + 1), this.#Z(s, "aria-setsize", this.#p.length), this.#P(s, "click", (t => { this.setSelectedCountryItem(t.currentTarget.dataset.key) })), this.#P(s, "keyup", (t => { "Enter" === t.key && this.setSelectedCountryItem(t.currentTarget.dataset.key) })), e.disabled && this.#it(s, "disabled-opt"), s.append(i, l), this.#c === e.i ? (this.#it(s, "selected-opt"), this.#Z(s, "aria-selected", !0)) : this.#Z(s, "aria-selected", !1), s } }) } #G(t) { if ("Enter" === t.key && this.#p.length) { const t = this.#p?.[0].i; t && (this.setSelectedCountryItem(t), this.searchOptions("")) } else this.searchOptions(t.target.value) } searchOptions(t) { this.#lt(t); let e = []; t ? (e = this.#L.filter((e => e.lbl.toLowerCase().includes(t.toLowerCase()))), e.length || (e = [{ i: 0, lbl: this.#w }]), this.#p = e, this.#y && (this.#a.style.display = "grid")) : (this.#p = this.#L, this.#y && (this.#a.style.display = "none")), this.#tt() } #lt(t) { this.#r.value = t } #ot(t) { this.#t.contains(t.target) || this.setMenu({ open: !1 }) } #_() { return this.#t.classList.contains(`${this.fieldKey}-menu-open`) } #rt() { const t = window, e = this.#s.getBoundingClientRect(), s = e.top, i = t.innerHeight - e.bottom; i < s && i < this.#v ? (this.#t.style.flexDirection = "column-reverse", this.#t.style.bottom = "0%") : (this.#t.style.flexDirection = "column", this.#t.style.removeProperty("bottom")) } setMenu(t) { let { open: e } = t; this.#h.style.maxHeight = `${e ? this.#v : 0}px`, e ? (this.#rt(), this.#t.classList.add(`${this.fieldKey}-menu-open`), this.#P(this.#O, "click", (t => this.#ot(t))), this.#r.tabIndex = "0", this.#a.tabIndex = "0", this.#s.setAttribute("aria-expanded", "true"), this.#Z(this.#d, "aria-hidden", !1), this.#Z(this.#r, "aria-hidden", !1), this.#tt()) : (this.#t.classList.remove(`${this.fieldKey}-menu-open`), this.#O.removeEventListener("click", this.#ot), this.searchOptions(""), this.#r.blur(), this.#r.tabIndex = "-1", this.#a.tabIndex = "-1", this.#s.setAttribute("aria-expanded", "false"), this.#Z(this.#d, "aria-hidden", !0), this.#Z(this.#r, "aria-hidden", !0)) } #U(t) { "Space" === t.code && (this.#r.focus(), this.setMenu({ open: !0 })), "click" === t.type && (this.#_() ? this.setMenu({ open: !1 }) : (this.#r.focus(), this.setMenu({ open: !0 }))) } set disabled(t) { "true" === String(t).toLowerCase() ? (this.#t.classList.add("disabled"), this.#e.disabled = !0, this.#s.tabIndex = "-1", this.#l.tabIndex = "-1", this.#Z(this.#s, "aria-label", "Country Field disabled"), this.setMenu({ open: !1 })) : "false" === String(t).toLowerCase() && (this.#t.classList.remove("disabled"), this.#e.removeAttribute("disabled"), this.#s.tabIndex = "0", this.#l.tabIndex = "0", this.#Z(this.#s, "aria-label", this.#f)) } get disabled() { return this.#e.disabled } set readonly(t) { "true" === String(t).toLowerCase() ? (this.#t.classList.add("disabled"), this.#e.readOnly = !0, this.#s.tabIndex = "-1", this.#m && (this.#l.tabIndex = "-1"), this.setMenu({ open: !1 })) : "false" === String(t).toLowerCase() && (this.#t.classList.remove("disabled"), this.#e.removeAttribute("readonly"), this.#m && (this.#s.tabIndex = "0"), this.#l.tabIndex = "0") } get readonly() { return this.#e.readOnly } set value(t) { this.#e.value = t } get value() { return this.#et()?.val } #at() { this.#N.forEach((t => { let { selector: e, eventType: s, cb: i } = t; e.removeEventListener(s, i) })) } destroy() { this.#d.innerHTML = "", this.value = "", this.#at() } } }));
